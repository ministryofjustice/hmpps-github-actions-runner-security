name: 'Remove offline runners'
description: 'action to remove offline runners'
inputs:
  gh_auth_token:
    description: 'Token used to authenticate to Github'
  qty_runners:
    description: 'Number of expected runners'
    default: '1'
  github_org:
    description: 'The github org in which the runners are deployed'
  runner_label:
    description: The labels for the runners
    required: true
    
runs:
  using: "composite"
  steps:
  - name: Install dependencies
    shell: bash
    run: |
      python -m pip install --upgrade pip
      pip install -r requirements.txt
  - name: clean up runners
    shell: python {0} 
    id: cleanup-runners
    run: |
      import requests
      import os
      from time import sleep
      # Attempts to remove any offline runners - giving time for old ones to expire
      def main():
        github_org = os.getenv('github_org')
        auth_token = os.getenv('gh_auth_token')
        runner_label = os.getenv('runner_label')
        retry_count=0
        headers = {
          "Authorization": f"Bearer {auth_token}",
          "Accept": "application/vnd.github+json"
        }
        while retry_count < 10:
          print(f'Attempt {retry_count+1}/10 ...')
          try:
            # Calling unsupported PyGithub API endpoint
            url = f"https://api.github.com/orgs/{github_org}/actions/runners"
            response = requests.get(url, headers=headers)
            if response.status_code == 200:
              print("Successfully called GET /orgs/{github_org}/actions/runners runners endpoint")
              data = response.json()

              # Filter runners with the runner_label
              filtered_runners = [
                  runner for runner in data['runners']
                  if any(label['name'] == runner_label for label in runner['labels'])
              ]

              offline_runners = [
                  runner for runner in filtered_runners
                  if runner['status'] == 'offline'
              ]

              qty_runners=len(offline_runners)
              print(f'Found {qty_runners} offline runners with label "{runner_label}".')

              for runner in offline_runners:
                print(f'Trying to delete runner {runner['name']}...')
                # Calling unsupported PyGithub API endpoint
                url = f"https://api.github.com/orgs/{github_org}/actions/runners/{runner['id']}"
                response = requests.delete(url, headers=headers)
                print(response.status_code)
                if response.status_code == 204:
                  print(f"Successfully deleted offline runner {runner['name']}.")
                else:
                  print(f"Failed to delete offline runner {runner['name']}.")
            else:
                print(f"Failed to call GET /orgs/{github_org}/actions/runners endpoint: {response.status_code} - {response.text}")
          
          except Exception as e:
            print(f'Failed because {e}')
          
          retry_count+=1
          sleep_time=20
          print(f'Sleeping for {sleep_time} seconds... and then checking again.')
          sleep(sleep_time)

      if __name__ == '__main__':
        main()
    
    env:
      github_org: ${{ inputs.github_org }}
      gh_auth_token: ${{ inputs.gh_auth_token }}
      runner_label: ${{ inputs.runner_label }}
      PYTHONUNBUFFERED: "1"
